import { UiActions } from "../Slice/UiSlice";
import axios from "axios";
import { TOKEN } from "@/Constants";
import { toast } from '@/components/core/toaster';


// üìå R√©cup√©rer tous les th√®mes
export const fetchThemes = async (dispatch) => {
  try {
    const token = localStorage.getItem(TOKEN);
    const response = await axios.get("http://localhost:9090/api/themes", {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });
    return response.data;
  } catch (error) {
    dispatch(UiActions.setIsError("√âchec du chargement des th√®mes"));
    throw error;
  }
};

// üìå R√©cup√©rer un th√®me par ID
export const getThemeById = async (id, dispatch) => {
  try {
    const token = localStorage.getItem(TOKEN);
    const response = await axios.get(`http://localhost:9090/api/themes/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });
    return response.data;
  } catch (error) {
    dispatch(UiActions.setIsError("√âchec de la r√©cup√©ration du th√®me"));
    throw error;
  }
};

// üìå Supprimer un th√®me
export const deleteTheme = async (id, dispatch) => {
  try {
    const token = localStorage.getItem(TOKEN);
    await axios.delete(`http://localhost:9090/api/themes/${id}`, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });
    dispatch(UiActions.setIsSuccess("Th√®me supprim√© avec succ√®s"));
    toast.success("Th√®me supprim√© avec succ√®s");

  } catch (error) {
    dispatch(UiActions.setIsError("√âchec de la suppression du th√®me"));
    toast.error("√âchec de la suppression du Th√®me");

    throw error;
  }
};

// üìå Mettre √† jour un th√®me
export const updateTheme = async (id, themeData, dispatch) => {
  try {
    const token = localStorage.getItem(TOKEN);
    const response = await axios.put(
      `http://localhost:9090/api/themes/${id}`,
      {
        nom: themeData.nom,
        nomChampApplication: themeData.nomChampApplication,
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );

    if (response.data) {
      dispatch(UiActions.setIsSuccess("Th√®me mis √† jour avec succ√®s!"));
      toast.success("Th√®me mis √† jour avec succ√®s");
      return response.data;
    }
  } catch (error) {
    dispatch(UiActions.setIsError(error.message));
    toast.error("√âchec de la mis √† jour du Th√®me");
    throw error;
  }
};

// üìå Ajouter un nouveau th√®me
export const addTheme = async (themeData, dispatch) => {
  try {
    const token = localStorage.getItem(TOKEN);
    const response = await axios.post(
      "http://localhost:9090/api/themes",
      {
        nom: themeData.nom,
        nomChampApplication: themeData.nomChampApplication,
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );

    if (response.data) {
      dispatch(UiActions.setIsSuccess("Th√®me cr√©√© avec succ√®s"));
      toast.success("Th√®me cr√©√© avec succ√®s");

      return response.data;
    }
  } catch (error) {
    dispatch(UiActions.setIsError("√âchec de la cr√©ation du th√®me"));
    toast.error("√âchec de la cr√©ation du Th√®me");
    throw error;
  }
};
